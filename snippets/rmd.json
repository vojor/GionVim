{
    "%%": {
        "prefix": "%%",
        "body": [
            "% ${1:`Filename('', 'title')`}",
            "% ${2:`g:snips_author`}",
            "% ${3:`strftime(\"%d %B %Y\")`}",
            "${4}"
        ],
        "description": ""
    },
    "%%*": {
        "prefix": "%%*",
        "body": [
            "% ${1:`Filename('', @*)`}",
            "% ${2:`g:snips_author`}",
            "% ${3:`strftime(\"%d %b %Y\")`}",
            "${4}",
            "# library()"
        ],
        "description": ""
    },
    "req": {
        "prefix": "req",
        "body": [
            "require(${1:}, quietly = TRUE)",
            "# If Condition"
        ],
        "description": ""
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ( $1 )",
            "{",
            "${2:}",
            "}"
        ],
        "description": ""
    },
    "el": {
        "prefix": "el",
        "body": [
            "else",
            "{",
            "${1:}",
            "}",
            "# Function"
        ],
        "description": ""
    },
    "fun": {
        "prefix": "fun",
        "body": [
            "${1:funname} <- \t\t\t# ${2:}",
            "function",
            "(",
            "${3:}",
            ")",
            "{",
            "${4:}",
            "}",
            "# repeat"
        ],
        "description": ""
    },
    "re": {
        "prefix": "re",
        "body": [
            "repeat{",
            "${2:}",
            "if($1) break",
            "}",
            "# matrix"
        ],
        "description": ""
    },
    "ma": {
        "prefix": "ma",
        "body": [
            "matrix(NA, nrow = ${1:}, ncol = ${2:})",
            "# data frame"
        ],
        "description": ""
    },
    "df": {
        "prefix": "df",
        "body": [
            "data.frame(${1:}, header = TRUE)"
        ],
        "description": ""
    },
    "cmdarg": {
        "prefix": "cmdarg",
        "body": [
            "args <- commandArgs(TRUE)",
            "if (length(args) == 0)",
            "stop(\"Please give ${1:}!\")",
            "if (!all(file.exists(args)))",
            "stop(\"Couln't find input files!\")"
        ],
        "description": ""
    },
    "getopt": {
        "prefix": "getopt",
        "body": [
            "require('getopt', quietly = TRUE)",
            "opt_spec <- matrix(c(",
            "'help',     'h', 0, \"logical\", \t\"Getting help\",",
            "'file',     'f', 1, \"character\",\"File to process\"",
            "), ncol = 5, byrow = TRUE)",
            "opt <- getopt(spec = opt_spec)",
            "if ( !is.null(opt$help) || is.null(commandArgs()) )   {",
            "cat(getopt(spec = opt_spec, usage = TRUE, command = \"yourCmd\"))",
            "q(status=0)",
            "}",
            "# some inital value",
            "if ( is.null(opt$???) )    { opt$??? <- ??? }"
        ],
        "description": ""
    },
    "optparse": {
        "prefix": "optparse",
        "body": [
            "require(\"optparse\", quietly = TRUE)",
            "option_list <-",
            "list(make_option(c(\"-n\", \"--add_numbers\"), action=\"store_true\", default=FALSE,",
            "help=\"Print line number at the beginning of each line [default]\")",
            ")",
            "parser <- OptionParser(usage = \"%prog [options] file\", option_list=option_list)",
            "arguments <- parse_args(parser, positional_arguments = TRUE)",
            "opt <- arguments$options",
            "if(length(arguments$args) != 1) {",
            "cat(\"Incorrect number of required positional arguments\\n\\n\")",
            "print_help(parser)",
            "stop()",
            "} else {",
            "file <- arguments$args",
            "}",
            "if( file.access(file) == -1) {",
            "stop(sprintf(\"Specified file ( %s ) does not exist\", file))",
            "} else {",
            "file_text <- readLines(file)",
            "}"
        ],
        "description": ""
    },
    "#!": {
        "prefix": "#!",
        "body": [
            "#!/usr/bin/env Rscript"
        ],
        "description": ""
    },
    "debug": {
        "prefix": "debug",
        "body": [
            "# Development & Debugging, don't forget to uncomment afterwards!",
            "#--------------------------------------------------------------------------------",
            "#setwd(\"~/Projekte/${1:}\")",
            "#opt <- list(${2:}",
            "#            )",
            "#--------------------------------------------------------------------------------",
            "# Took from pandoc-plugin <<<<",
            "# Underline with `=`s or `-`s"
        ],
        "description": ""
    },
    "#===": {
        "prefix": "#===",
        "body": [
            "#`repeat('=', strlen(getline(line(\".\") - 1)))`",
            "${1}"
        ],
        "description": ""
    },
    "#---": {
        "prefix": "#---",
        "body": [
            "#`repeat('-', strlen(getline(line(\".\") - 1)))`",
            "${1}",
            "# >>>>"
        ],
        "description": ""
    },
    "r": {
        "prefix": "r",
        "body": [
            "\\`\\`\\`{r ${1:chung_tag}, echo = FALSE ${2:options}}",
            "${3:}",
            "\\`\\`\\`"
        ],
        "description": ""
    },
    "ri": {
        "prefix": "ri",
        "body": [
            "\\`{r ${1:}}\\`"
        ],
        "description": ""
    },
    "copt": {
        "prefix": "copt",
        "body": [
            "\\`\\`\\` {r setup, echo = FALSE}",
            "opts_chunk$set(fig.path='../figures/${1:}', cache.path='../cache/-'",
            ", fig.align='center', fig.show='hold', par=TRUE)",
            "#opts_knit$set(upload.fun = imgur_upload) # upload images",
            "\\`\\`\\`",
            "# End of File ===================================================================",
            "# vim: set noexpandtab:"
        ],
        "description": ""
    }
}
