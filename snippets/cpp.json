{
    "mainn": {
        "prefix": "mainn",
        "body": [
            "int main()",
            "{",
            "${0}",
            "return 0;",
            "}",
            "##",
            "## Preprocessor",
            "# #include <...>"
        ],
        "description": ""
    },
    "incc": {
        "prefix": "incc",
        "body": [
            "#include <${1:iostream}>"
        ],
        "description": ""
    },
    "binc": {
        "prefix": "binc",
        "body": [
            "#include <boost/${1:shared_ptr}.hpp>",
            "##",
            "## STL Collections",
            "# std::array"
        ],
        "description": ""
    },
    "array": {
        "prefix": "array",
        "body": [
            "std::array<${1:T}, ${2:N}> ${3};",
            "# std::vector"
        ],
        "description": ""
    },
    "vector": {
        "prefix": "vector",
        "body": [
            "std::vector<${1:T}> ${2};",
            "# std::deque"
        ],
        "description": ""
    },
    "deque": {
        "prefix": "deque",
        "body": [
            "std::deque<${1:T}> ${2};",
            "# std::forward_list"
        ],
        "description": ""
    },
    "flist": {
        "prefix": "flist",
        "body": [
            "std::forward_list<${1:T}> ${2};",
            "# std::list"
        ],
        "description": ""
    },
    "list": {
        "prefix": "list",
        "body": [
            "std::list<${1:T}> ${2};",
            "# std::set"
        ],
        "description": ""
    },
    "set": {
        "prefix": "set",
        "body": [
            "std::set<${1:T}> ${2};",
            "# std::map"
        ],
        "description": ""
    },
    "map": {
        "prefix": "map",
        "body": [
            "std::map<${1:Key}, ${2:T}> ${3};",
            "# std::multiset"
        ],
        "description": ""
    },
    "mset": {
        "prefix": "mset",
        "body": [
            "std::multiset<${1:T}> ${2};",
            "# std::multimap"
        ],
        "description": ""
    },
    "mmap": {
        "prefix": "mmap",
        "body": [
            "std::multimap<${1:Key}, ${2:T}> ${3};",
            "# std::unordered_set"
        ],
        "description": ""
    },
    "uset": {
        "prefix": "uset",
        "body": [
            "std::unordered_set<${1:T}> ${2};",
            "# std::unordered_map"
        ],
        "description": ""
    },
    "umap": {
        "prefix": "umap",
        "body": [
            "std::unordered_map<${1:Key}, ${2:T}> ${3};",
            "# std::unordered_multiset"
        ],
        "description": ""
    },
    "umset": {
        "prefix": "umset",
        "body": [
            "std::unordered_multiset<${1:T}> ${2};",
            "# std::unordered_multimap"
        ],
        "description": ""
    },
    "ummap": {
        "prefix": "ummap",
        "body": [
            "std::unordered_multimap<${1:Key}, ${2:T}> ${3};",
            "# std::stack"
        ],
        "description": ""
    },
    "stack": {
        "prefix": "stack",
        "body": [
            "std::stack<${1:T}> ${2};",
            "# std::queue"
        ],
        "description": ""
    },
    "queue": {
        "prefix": "queue",
        "body": [
            "std::queue<${1:T}> ${2};",
            "# std::priority_queue"
        ],
        "description": ""
    },
    "pqueue": {
        "prefix": "pqueue",
        "body": [
            "std::priority_queue<${1:T}> ${2};",
            "##",
            "## STL smart pointers",
            "# std::shared_ptr"
        ],
        "description": ""
    },
    "msp": {
        "prefix": "msp",
        "body": [
            "std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});"
        ],
        "description": ""
    },
    "amsp": {
        "prefix": "amsp",
        "body": [
            "auto ${1} = std::make_shared<${2:T}>(${3});",
            "# std::unique_ptr"
        ],
        "description": ""
    },
    "mup": {
        "prefix": "mup",
        "body": [
            "std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});"
        ],
        "description": ""
    },
    "amup": {
        "prefix": "amup",
        "body": [
            "auto ${1} = std::make_unique<${2:T}>(${3});",
            "##",
            "## Access Modifiers",
            "# private"
        ],
        "description": ""
    },
    "pri": {
        "prefix": "pri",
        "body": [
            "private",
            "# protected"
        ],
        "description": ""
    },
    "pro": {
        "prefix": "pro",
        "body": [
            "protected",
            "# public"
        ],
        "description": ""
    },
    "pub": {
        "prefix": "pub",
        "body": [
            "public",
            "# friend"
        ],
        "description": ""
    },
    "fr": {
        "prefix": "fr",
        "body": [
            "friend",
            "# mutable"
        ],
        "description": ""
    },
    "mu": {
        "prefix": "mu",
        "body": [
            "mutable",
            "##",
            "## Class",
            "# class"
        ],
        "description": ""
    },
    "cl": {
        "prefix": "cl",
        "body": [
            "/*! \\class $1",
            "*  \\brief ${3:Brief class description}",
            "*",
            "*  ${4:Detailed description}",
            "*/",
            "class ${1:`vim_snippets#Filename('$1', 'name')`}",
            "{",
            "public:",
            "$1(${2});",
            "virtual ~$1();",
            "protected:",
            "m_${5}; /*!< ${6:Member description} */",
            "};",
            "# member function implementation"
        ],
        "description": ""
    },
    "mfun": {
        "prefix": "mfun",
        "body": [
            "${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {",
            "${0}",
            "}",
            "# member function implementation without parameters"
        ],
        "description": ""
    },
    "dmfun0": {
        "prefix": "dmfun0",
        "body": [
            "/*! \\brief ${4:Brief function description here}",
            "*",
            "*  ${5:Detailed description}",
            "*",
            "* \\return ${6:Return parameter description}",
            "*/",
            "${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {",
            "${0}",
            "}",
            "# member function implementation with one parameter"
        ],
        "description": ""
    },
    "dmfun1": {
        "prefix": "dmfun1",
        "body": [
            "/*! \\brief ${6:Brief function description here}",
            "*",
            "*  ${7:Detailed description}",
            "*",
            "* \\param $4 ${8:Parameter description}",
            "* \\return ${9:Return parameter description}",
            "*/",
            "${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {",
            "${0}",
            "}",
            "# member function implementation with two parameter"
        ],
        "description": ""
    },
    "dmfun2": {
        "prefix": "dmfun2",
        "body": [
            "/*! \\brief ${8:Brief function description here}",
            "*",
            "*  ${9:Detailed description}",
            "*",
            "* \\param $4 ${10:Parameter description}",
            "* \\param $6 ${11:Parameter description}",
            "* \\return ${12:Return parameter description}",
            "*/",
            "${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {",
            "${0}",
            "}",
            "# namespace"
        ],
        "description": ""
    },
    "ns": {
        "prefix": "ns",
        "body": [
            "namespace ${1:`vim_snippets#Filename('', 'my')`} {",
            "${0}",
            "} /* namespace $1 */"
        ],
        "description": ""
    },
    "ans": {
        "prefix": "ans",
        "body": [
            "namespace {",
            "${0}",
            "}",
            "##",
            "## Casts",
            "# static"
        ],
        "description": ""
    },
    "sca": {
        "prefix": "sca",
        "body": [
            "static_cast<${1:unsigned}>(${2:expr})${3}",
            "# dynamic"
        ],
        "description": ""
    },
    "dca": {
        "prefix": "dca",
        "body": [
            "dynamic_cast<${1:unsigned}>(${2:expr})${3}",
            "# reinterpret"
        ],
        "description": ""
    },
    "rca": {
        "prefix": "rca",
        "body": [
            "reinterpret_cast<${1:unsigned}>(${2:expr})${3}",
            "# const"
        ],
        "description": ""
    },
    "cca": {
        "prefix": "cca",
        "body": [
            "const_cast<${1:unsigned}>(${2:expr})${3}",
            "## Iteration",
            "# for i"
        ],
        "description": ""
    },
    "fori": {
        "prefix": "fori",
        "body": [
            "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {",
            "${4}",
            "}",
            "# foreach"
        ],
        "description": ""
    },
    "fore": {
        "prefix": "fore",
        "body": [
            "for (${1:auto} ${2:i} : ${3:container}) {",
            "${4}",
            "}",
            "# iterator"
        ],
        "description": ""
    },
    "iter": {
        "prefix": "iter",
        "body": [
            "for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {",
            "${6}",
            "}",
            "# auto iterator"
        ],
        "description": ""
    },
    "itera": {
        "prefix": "itera",
        "body": [
            "for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {",
            "${3:std::cout << *$1 << std::endl;}",
            "}",
            "##",
            "## Lambdas",
            "# lambda (one line)"
        ],
        "description": ""
    },
    "ld": {
        "prefix": "ld",
        "body": [
            "[${1}](${2}){${3}};",
            "# lambda (multi-line)"
        ],
        "description": ""
    },
    "lld": {
        "prefix": "lld",
        "body": [
            "[${1}](${2}){",
            "${3}",
            "};",
            "# auto function"
        ],
        "description": ""
    },
    "af": {
        "prefix": "af",
        "body": [
            "auto ${1:name}(${2}) -> ${3:void}",
            "{",
            "${0}",
            "};",
            "# Range-v3 transform"
        ],
        "description": "auto function"
    },
    "transform": {
        "prefix": "transform",
        "body": [
            "${1:${2:std::}${3:ranges::}views::}transform($4)",
            "# Range-v3 transform"
        ],
        "description": "ranges::views::transform"
    },
    "filter": {
        "prefix": "filter",
        "body": [
            "${1:${2:std::}${3:ranges::}views::}filter($4)",
            "# Range-v3 ranges::"
        ],
        "description": "ranges::views::filter"
    },
    "r": {
        "prefix": "r",
        "body": [
            "ranges::",
            "# Range-v3 ranges::views::"
        ],
        "description": "ranges::"
    },
    "rv": {
        "prefix": "rv",
        "body": [
            "ranges::views::",
            "# Range-v3 ranges::actions::"
        ],
        "description": "ranges::views::"
    },
    "ra": {
        "prefix": "ra",
        "body": [
            "ranges::actions::",
            "# STL std::ranges::"
        ],
        "description": "ranges::actions::"
    },
    "sr": {
        "prefix": "sr",
        "body": [
            "std::ranges::",
            "# STL std::views::"
        ],
        "description": "std::ranges::"
    },
    "sv": {
        "prefix": "sv",
        "body": [
            "std::views::",
            "##",
            "## Tests",
            "# GTest:add main"
        ],
        "description": "std::views::"
    },
    "gtemain": {
        "prefix": "gtemain",
        "body": [
            "int main(int argc, char **argv) {",
            "testing::InitGoogleTest(&argc, argv);",
            "return RUN_ALL_TESTS();",
            "}",
            "# GTest:add test"
        ],
        "description": "GTest:add main"
    },
    "gtetest": {
        "prefix": "gtetest",
        "body": [
            "TEST(${1:SuiteName}, ${2:TestName}) {",
            "${0}",
            "}",
            "# GTest:add fixture"
        ],
        "description": "GTest:add test"
    },
    "gtefix": {
        "prefix": "gtefix",
        "body": [
            "TEST_F(${1:SuiteName}, ${2:TestName}) {",
            "${0}",
            "}",
            "# GTest:add parameterized test"
        ],
        "description": "GTest:add fixture"
    },
    "gtepar": {
        "prefix": "gtepar",
        "body": [
            "TEST_P(${1:SuiteName}, ${2:TestName}) {",
            "${0}",
            "}",
            "# GTest:instantiate parameterized test"
        ],
        "description": "GTest:add parameterized test"
    },
    "gteparins": {
        "prefix": "gteparins",
        "body": [
            "INSTANTIATE_TEST_SUITE_P(${1:InstantiationName}, ${2:SuiteName}, ${0});"
        ],
        "description": "GTest:instantiate parameterized test"
    }
}
