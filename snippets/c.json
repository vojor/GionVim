{
    "inc": {
        "prefix": "inc",
        "body": [
            "#include <${1:stdio}.h>",
            "# #include \"...\""
        ],
        "description": ""
    },
    "Inc": {
        "prefix": "Inc",
        "body": [
            "#include \"${1:`vim_snippets#Filename(\"$1.h\")`}\"",
            "# ifndef...define...endif"
        ],
        "description": ""
    },
    "ndef": {
        "prefix": "ndef",
        "body": [
            "#ifndef $1",
            "#define ${1:SYMBOL} ${2:value}",
            "#endif /* ifndef $1 */",
            "# define"
        ],
        "description": ""
    },
    "def": {
        "prefix": "def",
        "body": [
            "#define",
            "# ifdef...endif"
        ],
        "description": ""
    },
    "ifdef": {
        "prefix": "ifdef",
        "body": [
            "#ifdef ${1:FOO}",
            "${2:#define }",
            "#endif",
            "# if",
            "# header include guard"
        ],
        "description": ""
    },
    "once": {
        "prefix": "once",
        "body": [
            "#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}",
            "#define $1",
            "${0}",
            "#endif /* end of include guard: $1 */",
            "# Disable C++ name mangling in C headers"
        ],
        "description": ""
    },
    "nocxx": {
        "prefix": "nocxx",
        "body": [
            "#ifdef __cplusplus",
            "extern \"C\" {",
            "#endif",
            "${0}",
            "#ifdef __cplusplus",
            "} /* extern \"C\" */",
            "#endif",
            "##",
            "## Control Statements",
            "# if"
        ],
        "description": ""
    },
    "ife": {
        "prefix": "ife",
        "body": [
            "if (${1:true}) {",
            "${2:${VISUAL}}",
            "} else {",
            "${0}",
            "}",
            "# else"
        ],
        "description": ""
    },
    "el": {
        "prefix": "el",
        "body": [
            "else {",
            "${0:${VISUAL}}",
            "}",
            "# else if"
        ],
        "description": ""
    },
    "elif": {
        "prefix": "elif",
        "body": [
            "else if (${1:true}) {",
            "${0:${VISUAL}}",
            "}",
            "# ternary"
        ],
        "description": ""
    },
    "t": {
        "prefix": "t",
        "body": [
            "$1 ? $2 : $0",
            "# switch"
        ],
        "description": "Ternary: `condition ? true : false`"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${1:/* variable */}) {",
            "case ${2:/* variable case */}:",
            "${3}",
            "${4:break;}${5}",
            "default:",
            "${6}",
            "}",
            "# switch without default"
        ],
        "description": ""
    },
    "switchndef": {
        "prefix": "switchndef",
        "body": [
            "switch (${1:/* variable */}) {",
            "case ${2:/* variable case */}:",
            "${3}",
            "${4:break;}${5}",
            "}",
            "# case"
        ],
        "description": ""
    },
    "case": {
        "prefix": "case",
        "body": [
            "case ${1:/* variable case */}:",
            "${2}",
            "${3:break;}"
        ],
        "description": ""
    },
    "ret": {
        "prefix": "ret",
        "body": [
            "return ${0};"
        ],
        "description": ""
    },
    "ex": {
        "prefix": "ex",
        "body": [
            "exit($0);",
            "##",
            "## Loops",
            "# for"
        ],
        "description": ""
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {",
            "${4}",
            "}",
            "# for (custom)"
        ],
        "description": ""
    },
    "forr": {
        "prefix": "forr",
        "body": [
            "for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {",
            "${5}",
            "}",
            "# while"
        ],
        "description": ""
    },
    "wh": {
        "prefix": "wh",
        "body": [
            "while (${1:1}) {",
            "${0:${VISUAL}}",
            "}"
        ],
        "description": ""
    },
    "wht": {
        "prefix": "wht",
        "body": [
            "while (true) {",
            "${0:${VISUAL}}",
            "}",
            "# do... while"
        ],
        "description": ""
    },
    "do": {
        "prefix": "do",
        "body": [
            "do {",
            "${0:${VISUAL}}",
            "} while ($1);",
            "##",
            "## Functions",
            "# function definition"
        ],
        "description": ""
    },
    "fun": {
        "prefix": "fun",
        "body": [
            "${1:void} ${2:function_name}(${3})",
            "{",
            "${4}",
            "}",
            "# function definition with zero parameters"
        ],
        "description": ""
    },
    "fun0": {
        "prefix": "fun0",
        "body": [
            "${1:void} ${2:function_name}()",
            "{",
            "${3}",
            "}",
            "# function definition with Doxygen documentation"
        ],
        "description": ""
    },
    "dfun0": {
        "prefix": "dfun0",
        "body": [
            "/*! \\brief ${1:Brief function description here}",
            "*",
            "*  ${2:Detailed description of the function}",
            "*",
            "* \\return ${3:Return parameter description}",
            "*/",
            "${4:void} ${5:function_name}()",
            "{",
            "${6}",
            "}",
            "# function definition with one parameter"
        ],
        "description": ""
    },
    "fun1": {
        "prefix": "fun1",
        "body": [
            "${1:void} ${2:function_name}(${3:Type} ${4:Parameter})",
            "{",
            "${5}",
            "}",
            "# function definition with one parameter with  Doxygen documentation"
        ],
        "description": ""
    },
    "dfun1": {
        "prefix": "dfun1",
        "body": [
            "/*! \\brief ${1:Brief function description here}",
            "*",
            "*  ${2:Detailed description of the function}",
            "*",
            "* \\param $3 ${4:Parameter description}",
            "* \\return ${5:Return parameter description}",
            "*/",
            "${6:void} ${7:function_name}(${8:Type} ${3:Parameter})",
            "{",
            "${9}",
            "}",
            "# function definition with two parameters"
        ],
        "description": ""
    },
    "fun2": {
        "prefix": "fun2",
        "body": [
            "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})",
            "{",
            "${7}",
            "}",
            "# function definition with two parameters with  Doxygen documentation"
        ],
        "description": ""
    },
    "dfun2": {
        "prefix": "dfun2",
        "body": [
            "/*! \\brief ${1:Brief function description here}",
            "*",
            "*  ${2:Detailed description of the function}",
            "*",
            "* \\param $3 ${4:Parameter description}",
            "* \\param $5 ${6:Parameter description}",
            "* \\return ${7:Return parameter description}",
            "*/",
            "${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})",
            "{",
            "${12}",
            "}",
            "# function definition with three parameters"
        ],
        "description": ""
    },
    "fun3": {
        "prefix": "fun3",
        "body": [
            "${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})",
            "{",
            "${9}",
            "}",
            "# function definition with three parameters with  Doxygen documentation"
        ],
        "description": ""
    },
    "dfun3": {
        "prefix": "dfun3",
        "body": [
            "/*! \\brief ${1:Brief function description here}",
            "*",
            "*  ${2:Detailed description of the function}",
            "*",
            "* \\param $3 ${4:Parameter description}",
            "* \\param $5 ${6:Parameter description}",
            "* \\param $7 ${8:Parameter description}",
            "* \\return ${9:Return parameter description}",
            "*/",
            "${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})",
            "{",
            "${15}",
            "}",
            "# function declaration"
        ],
        "description": ""
    },
    "fund": {
        "prefix": "fund",
        "body": [
            "${1:void} ${2:function_name}(${3});",
            "##",
            "## Types",
            "# typedef"
        ],
        "description": ""
    },
    "td": {
        "prefix": "td",
        "body": [
            "typedef ${1:int} ${2:MyCustomType};",
            "# struct"
        ],
        "description": ""
    },
    "sd": {
        "prefix": "sd",
        "body": [
            "/*! \\struct $1",
            "*  \\brief ${3:Brief struct description}",
            "*",
            "*  ${4:Detailed description}",
            "*/",
            "struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {",
            "${2:Data} /*!< ${4:Description} */",
            "}${5: /* optional variable list */};",
            "# typedef struct"
        ],
        "description": ""
    },
    "tds": {
        "prefix": "tds",
        "body": [
            "/*! \\struct $2",
            "*  \\brief ${5:Brief struct description}",
            "*",
            "*  ${6:Detailed description}",
            "*/",
            "typedef struct ${2:_$1 }{",
            "m_${3:Data} /*!< ${4:Description} */",
            "} ${1:`vim_snippets#Filename('$1_t', 'name')`};"
        ],
        "description": ""
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "/*! \\enum $1",
            "*",
            "*  ${2:Detailed description}",
            "*/",
            "enum ${1:name} { ${0} };",
            "# typedef enum"
        ],
        "description": ""
    },
    "tde": {
        "prefix": "tde",
        "body": [
            "/*! \\enum $2",
            "*",
            "*  ${4:Detailed description}",
            "*/",
            "typedef enum {",
            "${1:Data} /*!< ${3:Description} */",
            "} ${2:foo};",
            "##",
            "## Input/Output",
            "# printf"
        ],
        "description": ""
    },
    "pr": {
        "prefix": "pr",
        "body": [
            "printf(\"${1:%s}\\n\"${2});",
            "# fprintf (again, this isn't as nice as TextMate's version, but it works)"
        ],
        "description": ""
    },
    "fpr": {
        "prefix": "fpr",
        "body": [
            "fprintf(${1:stderr}, \"${2:%s}\\n\"${3});"
        ],
        "description": ""
    },
    "prd": {
        "prefix": "prd",
        "body": [
            "printf(\"${1:} = %d\\n\", $1);"
        ],
        "description": ""
    },
    "prf": {
        "prefix": "prf",
        "body": [
            "printf(\"${1:} = %f\\n\", $1);"
        ],
        "description": ""
    },
    "prx": {
        "prefix": "prx",
        "body": [
            "printf(\"${1:} = %${2}\\n\", $1);"
        ],
        "description": ""
    },
    "warn": {
        "prefix": "warn",
        "body": [
            "warn(\"${1:%s}\"$0);"
        ],
        "description": ""
    },
    "warnx": {
        "prefix": "warnx",
        "body": [
            "warnx(\"${1:%s}\"$0);"
        ],
        "description": ""
    },
    "err": {
        "prefix": "err",
        "body": [
            "err(${1:1}, \"${2:%s}\"$0);"
        ],
        "description": ""
    },
    "errx": {
        "prefix": "errx",
        "body": [
            "errx(${1:1}, \"${2:%s}\"$0);",
            "# getopt"
        ],
        "description": ""
    },
    "getopt": {
        "prefix": "getopt",
        "body": [
            "int choice;",
            "while (1)",
            "{",
            "static struct option long_options[] =",
            "{",
            "/* Use flags like so:",
            "{\"verbose\",\tno_argument,\t&verbose_flag, 'V'}*/",
            "/* Argument styles: no_argument, required_argument, optional_argument */",
            "{\"version\", no_argument,\t0,\t'v'},",
            "{\"help\",\tno_argument,\t0,\t'h'},",
            "${1}",
            "{0,0,0,0}",
            "};",
            "int option_index = 0;",
            "/* Argument parameters:",
            "no_argument: \" \"",
            "required_argument: \":\"",
            "optional_argument: \"::\" */",
            "choice = getopt_long( argc, argv, \"vh\",",
            "long_options, &option_index);",
            "if (choice == -1)",
            "break;",
            "switch( choice )",
            "{",
            "case 'v':",
            "${2}",
            "break;",
            "case 'h':",
            "${3}",
            "break;",
            "case '?':",
            "/* getopt_long will have already printed an error */",
            "break;",
            "default:",
            "/* Not sure how to get here... */",
            "return EXIT_FAILURE;",
            "}",
            "}",
            "/* Deal with non-option arguments here */",
            "if ( optind < argc )",
            "{",
            "while ( optind < argc )",
            "{",
            "${0}",
            "}",
            "}",
            "## Assertions"
        ],
        "description": ""
    },
    "asr": {
        "prefix": "asr",
        "body": [
            "assert($1);"
        ],
        "description": ""
    },
    "anl": {
        "prefix": "anl",
        "body": [
            "assert(${1:ptr} != NULL);",
            "## Dynamic Allocation"
        ],
        "description": ""
    },
    "mlc": {
        "prefix": "mlc",
        "body": [
            "${1:ptr} = (${2:type}*) malloc(sizeof($2));"
        ],
        "description": ""
    },
    "clc": {
        "prefix": "clc",
        "body": [
            "${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));"
        ],
        "description": ""
    },
    "rlc": {
        "prefix": "rlc",
        "body": [
            "${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));"
        ],
        "description": ""
    },
    "mlcd": {
        "prefix": "mlcd",
        "body": [
            "${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));"
        ],
        "description": ""
    },
    "clcd": {
        "prefix": "clcd",
        "body": [
            "${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));"
        ],
        "description": ""
    },
    "fre": {
        "prefix": "fre",
        "body": [
            "free(${1:ptr});",
            "##",
            "# TODO section"
        ],
        "description": ""
    },
    "todo": {
        "prefix": "todo",
        "body": [
            "/*! TODO: ${1:Todo description here}",
            "*  \\todo $1",
            "*/",
            "## Miscellaneous",
            "# This is kind of convenient"
        ],
        "description": ""
    },
    ".": {
        "prefix": ".",
        "body": [
            "[${1}]"
        ],
        "description": ""
    },
    "asm": {
        "prefix": "asm",
        "body": [
            "__asm__ __volatile__(",
            "\"${0}\\n\\t\"",
            ":",
            ":",
            ");"
        ],
        "description": ""
    }
}
